package com.srvivek;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class SearchInRotatedSortedArrayTest {

    private final SearchInRotatedSortedArray object = new SearchInRotatedSortedArray();

    @Test
    public void emptyArrayTest() {
        Integer[] arr = new Integer[]{};
        int t = 0, expected = -1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void singleElementTest() {
        Integer[] arr = new Integer[]{6};
        int t = 6, expected = 0;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void singleElementMissingTargetTest() {
        Integer[] arr = new Integer[]{6};
        int t = 23, expected = -1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void oneKRotationTest() {
        Integer[] arr = new Integer[]{6,1,3,4,5};
        int t = 6, expected = 0;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void oneKRotationTestMissingTarget() {
        Integer[] arr = new Integer[]{6,1,3,4,5};
        int t = 74, expected = -1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void twoKRotationTest() {
        Integer[] arr = new Integer[]{5,6,1,3,4};
        int t = 6, expected = 1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void twoKRotationTestMissingTarget() {
        Integer[] arr = new Integer[]{5,6,1,3,4};
        int t = 71, expected = -1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void leetcodeExample1Test() {
        Integer[] arr = new Integer[]{4,5,6,7,0,1,2};
        int t = 0, expected = 4;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void leetcodeExample2Test() {
        Integer[] arr = new Integer[]{4,5,6,7,0,1,2};
        int t = 3, expected = -1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void leetcodeExample3Test() {
        Integer[] arr = new Integer[]{1};
        int t = 0, expected = -1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void duplicateElementArrayTest() {
        Integer[] arr = new Integer[]{2, 2, 2, 3, 2, 2, 2};
        int t = 3, expected = 3;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    /**
     * Test cases generated by co-pilot
     */

    @Test
    public void allElementsSameTest() {
        Integer[] arr = new Integer[]{2, 2, 2, 2, 2, 2, 2};
        int t = 2, expected = 3;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void allElementsSameMissingTargetTest() {
        Integer[] arr = new Integer[]{2, 2, 2, 2, 2, 2, 2};
        int t = 3, expected = -1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void largeArrayTest() {
        Integer[] arr = new Integer[1000000];
        for (int i = 0; i < 1000000; i++) {
            arr[i] = i;
        }
        int t = 999999, expected = 999999;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void largeArrayMissingTargetTest() {
        Integer[] arr = new Integer[1000000];
        for (int i = 0; i < 1000000; i++) {
            arr[i] = i;
        }

        int t = 1000001, expected = -1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void twoElementArrayFirstElementTest() {
        Integer[] arr = new Integer[]{3, 1};
        int t = 3, expected = 0;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void twoElementArraySecondElementTest() {

        Integer[] arr = new Integer[]{3, 1};
        int t = 1, expected = 1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void twoElementArrayMissingTargetTest() {
        Integer[] arr = new Integer[]{3, 1};
        int t = 2, expected = -1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void multipleRotationsTargetInSecondHalfTest() {
        Integer[] arr = new Integer[]{6, 7, 8, 1, 2, 3, 4, 5};
        int t = 3, expected = 5;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }

    @Test
    public void multipleRotationsTargetInFirstHalfTest() {
        Integer[] arr = new Integer[]{6, 7, 8, 1, 2, 3, 4, 5};
        int t = 7, expected = 1;

        int res = object.search(arr, t);
        Assertions.assertEquals(expected, res);

        res = object.searchIterative(arr, t);
        Assertions.assertEquals(expected, res);
    }
}
